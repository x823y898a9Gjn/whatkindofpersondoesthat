local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "BGTP fucker",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "go touch grass monkey",
    LoadingSubtitle = "SUCK MA DICKKKKK AYY YAYAY YAY AY YA",
    Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "bgtploverscript"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Go touch GRASS!!!!",
       Subtitle = "idk what to type here",
       Note = "", -- Use this to tell the user how to get a key
       FileName = "bgtpkey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"https://raw.githubusercontent.com/x7x7723bvb3b/x8xx88x88yy3y8fas/refs/heads/main/xx676t7t627d6tt8878"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

-- tabs
local MainTab = Window:CreateTab("Main", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

local Button = MainTab:CreateButton({
    Name = "All in One",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/x347bsbd8a24/ultraprotoucher/refs/heads/main/toucherv2",true))()
    end,
 })


local ModsTab = Window:CreateTab("Experimental", nil) -- Title, Image
local ModsSection = ModsTab:CreateSection("Mods")

-- Create a variable to track the toggle state
local modificationsEnabled = false

-- Create your toggle that sets this variable
local Toggle = ModsTab:CreateToggle({
    Name = "Enable Modifications",
    CurrentValue = false,
    Flag = "ModToggle",
    Callback = function(Value)
        modificationsEnabled = Value
        if not modificationsEnabled then
            
            -- Optionally revert changes or disable functionality here
        else
            
        end
    end,
})

-- Apply the toggle state when the player respawns
local Players = game:GetService("Players")
local function onPlayerSpawn(player)
    -- Check if the toggle is on when the player spawns
    if modificationsEnabled then
        
        -- Apply any modifications or functionality you want here
    else
        
        -- Optionally, disable functionality if the toggle is off
    end
end

-- Connect the function to the PlayerAdded and CharacterAdded events
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        onPlayerSpawn(player)
    end)
end)

local Slider = ModsTab:CreateSlider({
    Name = "Fire Rate",
    Range = {1000, 5000000},
    Increment = 1000,
    Suffix = "Rate",
    CurrentValue = 2000,
    Flag = "FireRateSlider",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.FireRate = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "Bullets",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Rate",
    CurrentValue = 1,
    Flag = "ddddwwd",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.Bullets = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local FireModeDropdown = ModsTab:CreateDropdown({
    Name = "Fire Mode",
    Options = {"Semi", "Auto"},
    CurrentOption = {"Semi"}, -- Default option
    MultipleOptions = false,
    Flag = "firemode",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local selectedMode = Option[1]

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.Mode = selectedMode
                    end
                end
            end
        end
    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "SpreadStepAmount",
    Range = {0, 5000},
    Increment = 100,
    Suffix = "Rate",
    CurrentValue = 1,
    Flag = "SpreadStepAmount",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.SpreadStepAmount = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "WalkMultiplier",
    Range = {0, 5000},
    Increment = 100,
    Suffix = "Rate",
    CurrentValue = 1,
    Flag = "WalkMultiplier",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.WalkMultiplier = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "SwayBase",
    Range = {0, 500},
    Increment = 10,
    Suffix = "Rate",
    CurrentValue = 1,
    Flag = "SwayBase",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.SwayBase = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "MaxSway",
    Range = {0, 500},
    Increment = 10,
    Suffix = "Rate",
    CurrentValue = 1,
    Flag = "MaxSway",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.MaxSway = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "BulletPenetration",
    Range = {0, 50000},
    Increment = 10,
    Suffix = "Rate",
    CurrentValue = 1,
    Flag = "BulletPenetration",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BulletPenetration = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "FallOfDamage",
    Range = {0, 50000},
    Increment = 10,
    Suffix = "Rate",
    CurrentValue = 0,
    Flag = "FallOfDamage",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.FallOfDamage = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "OffsetAngle",
    Range = {0, 500},
    Increment = 5,
    Suffix = "Rate",
    CurrentValue = 5,
    Flag = "OffsetAngle",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.OffsetAngle = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "OffsetAngle",
    Range = {0, 10},
    Increment = 0.1,
    Suffix = "Rate",
    CurrentValue = 0.1,
    Flag = "OffsetAngle",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.OffsetSens = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "OffsetAngle",
    Range = {0, 10},
    Increment = 0.1,
    Suffix = "Rate",
    CurrentValue = 0.1,
    Flag = "OffsetAngle",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.OffsetSens = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "AllowPenetration",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "AllowPenetrationf",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.AllowPenetration = allowPenetration
                    end
                end
            end
        end
    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "PenetrationDistance",
    Range = {0, 5000000},
    Increment = 1000,
    Suffix = "Rate",
    CurrentValue = 1500,
    Flag = "BulletPenetration",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.PenetrationDistance = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "CutOffGunshots",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "CutOffGunshots",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.CutOffGunshots = allowPenetration
                    end
                end
            end
        end
    end,
})



local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "CutOffDistance",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "CutOffDistance",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.CutOffDistance = allowPenetration
                    end
                end
            end
        end
    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "Distance",
    Range = {0, 5000000},
    Increment = 1000,
    Suffix = "Rate",
    CurrentValue = 1,
    Flag = "Distance",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.Distance = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "BDrop",
    Range = {0.1, 500},
    Increment = 0.1,
    Suffix = "Rate",
    CurrentValue = 0.1,
    Flag = "BDrop",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BDrop = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "BSpeed",
    Range = {1000, 5000000},
    Increment = 1000,
    Suffix = "Rate",
    CurrentValue = 1000,
    Flag = "BSpeed",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BSpeed = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "MeterSpeed",
    Range = {1000, 5000000},
    Increment = 1000,
    Suffix = "Rate",
    CurrentValue = 1000,
    Flag = "MeterSpeed",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.MeterSpeed = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "SuppressMaxDistance",
    Range = {10, 1000},
    Increment = 10,
    Suffix = "Rate",
    CurrentValue = 10,
    Flag = "SuppressMaxDistance",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.SuppressMaxDistance = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "SuppressTime",
    Range = {0.1, 100000},
    Increment = 0.1,
    Suffix = "Rate",
    CurrentValue = 0.2,
    Flag = "SuppressTime",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.SuppressTime = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "BulletWhiz",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "BulletWhiz",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BulletWhiz = allowPenetration
                    end
                end
            end
        end
    end,
})




local Slider = ModsTab:CreateSlider({
    Name = "BWEmitter",
    Range = {25, 100000},
    Increment = 25,
    Suffix = "Rate",
    CurrentValue = 25,
    Flag = "BWEmitter",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BWEmitter = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "BWMaxDistance",
    Range = {200, 100000},
    Increment = 200,
    Suffix = "Rate",
    CurrentValue = 200,
    Flag = "BWMaxDistance",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BWMaxDistance = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})




local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "BulletFlare",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "BulletFlare",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BulletFlare = allowPenetration
                    end
                end
            end
        end
    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "Tracer",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "Tracer",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.Tracer = allowPenetration
                    end
                end
            end
        end
    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "TracerLightEmission",
    Range = {1000, 100000},
    Increment = 1000,
    Suffix = "Rate",
    CurrentValue = 1000,
    Flag = "TracerLightEmission",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.TracerLightEmission = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "TracerLightInfluence",
    Range = {1, 1000},
    Increment = 1,
    Suffix = "Rate",
    CurrentValue = 0,
    Flag = "TracerLightInfluence",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.TracerLightInfluence = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "TracerLifeTime",
    Range = {0.1, 1000},
    Increment = 0.1,
    Suffix = "Rate",
    CurrentValue = 0.1,
    Flag = "TracerLifeTime",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.TracerLifeTime = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "TracerWidth",
    Range = {1, 10000},
    Increment = 1,
    Suffix = "Rate",
    CurrentValue = 6,
    Flag = "TracerWidth",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.TracerWidth = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})




local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "RandomTracer",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "RandomTracer",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.RandomTracer = allowPenetration
                    end
                end
            end
        end
    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "TracerEveryXShots",
    Range = {1, 1000},
    Increment = 1,
    Suffix = "Rate",
    CurrentValue = 2,
    Flag = "TracerEveryXShots",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.TracerEveryXShots = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "TracerChance",
    Range = {1, 10000},
    Increment = 1,
    Suffix = "Rate",
    CurrentValue = 100,
    Flag = "TracerChance",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.TracerChance = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "BulletLight",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "BulletLight",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BulletLight = allowPenetration
                    end
                end
            end
        end
    end,
})


local Slider = ModsTab:CreateSlider({
    Name = "BulletLightBrightness",
    Range = {1, 1000},
    Increment = 1,
    Suffix = "Rate",
    CurrentValue = 1,
    Flag = "BulletLightBrightness",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BulletLightBrightness = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "BulletLightRange",
    Range = {10, 1000},
    Increment = 10,
    Suffix = "Rate",
    CurrentValue = 40,
    Flag = "BulletLightRange",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BulletLightRange = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "FastReload",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "FastReload",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.FastReload = allowPenetration
                    end
                end
            end
        end
    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "SlideLock",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "SlideLock",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.SlideLock = allowPenetration
                    end
                end
            end
        end
    end,
})

local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "MoveBolt",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "MoveBolt",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.MoveBolt = allowPenetration
                    end
                end
            end
        end
    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "BoltLock",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "BoltLock",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BoltLock = allowPenetration
                    end
                end
            end
        end
    end,
})



local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "CanJam",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "CanJam",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.CanJam = allowPenetration
                    end
                end
            end
        end
    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "JamChance",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Rate",
    CurrentValue = 0,
    Flag = "JamChance",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.JamChance = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "IncludeChamberedBullet",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "IncludeChamberedBullet",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.IncludeChamberedBullet = allowPenetration
                    end
                end
            end
        end
    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "Chambered",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "Chambered",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.Chambered = allowPenetration
                    end
                end
            end
        end
    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "LauncherReady",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "LauncherReady",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.LauncherReady = allowPenetration
                    end
                end
            end
        end
    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "CanCheckMag",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "CanCheckMag",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.CanCheckMag = allowPenetration
                    end
                end
            end
        end
    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "ArcadeMode",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "ArcadeMode",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.ArcadeMode = allowPenetration
                    end
                end
            end
        end
    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "RainbowMode",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "RainbowMode",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.RainbowMode = allowPenetration
                    end
                end
            end
        end
    end,
})


local PenetrationDropdown = ModsTab:CreateDropdown({
    Name = "ModoTreino",
    Options = {"true", "false"},
    CurrentOption = {"false"}, -- Default option
    MultipleOptions = false,
    Flag = "ModoTreino",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local allowPenetration = Option[1] == "true" -- Convert string to boolean

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.ModoTreino = allowPenetration
                    end
                end
            end
        end
    end,
})




local Slider = ModsTab:CreateSlider({
    Name = "GunSize",
    Range = {0.5, 100},
    Increment = 0.5,
    Suffix = "Rate",
    CurrentValue = 3.5,
    Flag = "GunSize",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.GunSize = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})



local Slider = ModsTab:CreateSlider({
    Name = "GunFOVReduction",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Rate",
    CurrentValue = 3,
    Flag = "GunFOVReduction",
    Callback = function(Value)
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- If the toggle is on, proceed with modifying the settings
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.GunFOVReduction = Value  -- Change FireRate to the slider's current value
                    end
                end
            end
        end

    end,
})




local MiscTab = Window:CreateTab("Misc", nil) -- Title, Image
local MiscSection = MiscTab:CreateSection("Misc")



local Button = MiscTab:CreateButton({
    Name = "Infinite Ammo",
    Callback = function()
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            return
        end

        -- Modify the settings when the button is clicked
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local ammo = variables:FindFirstChild("Ammo")
                    if ammo then
                        ammo.Value = 898483884  -- Set ammo to infinite
                    end
                end
            end
        end
    end,
})




local Button = MiscTab:CreateButton({
    Name = "No Recoil",
    Callback = function()
        if not modificationsEnabled then
            -- Do nothing if modifications are disabled
            
            return
        end

        -- Modify the settings when the button is clicked
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.VRecoil = {0.0000001, 0.0000001}
                        settings.HRecoil = {0.0000001, 0.0000001}
                        settings.AimRecover = 5
                        settings.RecoilPunch = 0
                        settings.VPunchBase = 0.0000001
                        settings.HPunchBase = 0.0000001
                        settings.DPunchBase = 0.0000001
                        settings.AimRecoilReduction = 5
                        settings.PunchRecover = 5
                        settings.MinRecoilPower = 0.0000001
                        settings.MaxRecoilPower = 0.0000001
                        settings.RecoilPowerStepAmount = 0.0000001
                        settings.MinSpread = 0
                        settings.MaxSpread = 0
                    end
                end
            end
        end

    end,
})



local FireModeDropdown = MiscTab:CreateDropdown({
    Name = "Bullet Type",
    Options = {
        "7.62x39mm",
        "5.45x39mm",
        "5.45x39mm9",
        "Dark Energy Plasma",
        "9x39mm",
        "84mm HEAT",
        "Shrapnel-25",
        "7.62x51mm",
        "Plasma",
        "7.92x57mm Mauser",
        "9x21mm BT gzh",
        ".30-06",
        "12x70 Buckshot",
        "12.7x55mm",
        ".45 ACP",
        "9x19mm",
        ".303 British",
        "84mm HEAT551",
        "M381",
        ".50BMG",
        "7.62x51 NATO",
        "7.62x54mmR",
        "4.6x30mm",
        "5.56x45mm Varmageddon",
        "FN 5.7x28mm",
        "9x19 PBP gzh",
        "12x70 AP-20 Slug",
        ".300 AAC Blackout",
        "12.7x108mm BZT-44M",
        "OSR D.E.P",
        ".50 BMG",
        "9x18mm",
        "7.62x25 Tokarev",
        "7.62x39mm AP HE",
        "OG-7V",
        "PG-7VL",
        "9x21mm Gyurza",
        "7.92x33mm",
        ".338 Lapua",
        ".336 TKM",
        "20x70 Buckshot",
        "5.56x45mm M995",
        "5.56x45mm",
        "7.7x58mm Arisaka",
        "12x70 Dragons Breath",
        "5.56x45mm MK 318",
        ".30 Carbine",
        "7.5x54mm French",
        "6.8x51mm"
    },
    CurrentOption = {}, -- No default option selected
    MultipleOptions = false,
    Flag = "BulletType",
    Callback = function(Option)
        if not modificationsEnabled then return end

        local selectedBulletType = Option[1]

        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local backpack = player:WaitForChild("Backpack")
        local equippedTool = character and character:FindFirstChildOfClass("Tool")
        local toolsToModify = {}

        if backpack then
            for _, tool in ipairs(backpack:GetChildren()) do
                if tool:FindFirstChild("ACS_Module") then
                    table.insert(toolsToModify, tool)
                end
            end
        end

        if equippedTool and equippedTool:FindFirstChild("ACS_Module") then
            table.insert(toolsToModify, equippedTool)
        end

        for _, tool in ipairs(toolsToModify) do
            local acsModule = tool:FindFirstChild("ACS_Module")
            if acsModule then
                local variables = acsModule:FindFirstChild("Variables")
                if variables then
                    local settingsModule = variables:FindFirstChild("Settings")
                    if settingsModule then
                        local settings = require(settingsModule)
                        settings.BulletType = selectedBulletType
                    end
                end
            end
        end
    end,
})
